[debug] [zinc] IncrementalCompile -----------
[debug] IncrementalCompile.incrementalCompile
[debug] previous = Stamps for: 88 products, 31 sources, 1 libraries
[debug] current source = Set(${BASE}/src/main/scala/blackjack/calculation/statistical/probability/Rational.scala, ${BASE}/src/main/scala/blackjack/system/flow/action/StandFlow.scala, ${BASE}/src/main/scala/blackjack/system/flow/action/DoubleDownFlow.scala, ${BASE}/src/main/scala/blackjack/system/flow/calculation/CalculationFlow.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/PossibilityHandCalculator.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/probability/strategy/BasicStrategy.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/probability/BlackJackProbs.scala, ${BASE}/src/main/scala/blackjack/Hand.scala, ${BASE}/src/main/scala/blackjack/system/flow/action/HitFlow.scala, ${BASE}/src/main/scala/Main.scala, ${BASE}/src/main/scala/blackjack/system/flow/action/ActionFlow.scala, ${BASE}/src/main/scala/blackjack/system/parts/Computable.scala, ${BASE}/src/main/scala/blackjack/system/parts/ProbsPrintable.scala, ${BASE}/src/main/scala/blackjack/package.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/ProbsStatistical.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/probability/strategy/DetailsStrategy.scala, ${BASE}/src/main/scala/blackjack/system/parts/BlackJackIO.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/probability/ProbabilityOfBlackJack.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/probability/Probs.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/StatisticalCreater.scala, ${BASE}/src/main/scala/blackjack/calculation/statistical/probability/strategy/Strategy.scala)
[debug] > initialChanges = InitialChanges(Changes(added = Set(), removed = Set(${BASE}/src/main/scala/oldblackJack/BlackJackUtility.scala, ${BASE}/src/main/scala/newBJ/action/HitAction.scala, ${BASE}/src/main/scala/newBJ/action/DoubleDownAction.scala, ${BASE}/src/main/scala/BJ.scala, ${BASE}/src/main/scala/oldblackJack/package.scala, ${BASE}/src/main/scala/oldblackJack/BasicStrategy.scala, ${BASE}/src/main/scala/oldblackJack/DetailedStrategy.scala, ${BASE}/src/main/scala/newBJ/action/StandAction.scala, ${BASE}/src/main/scala/oldblackJack/BlackJackIO.scala, ${BASE}/src/main/scala/oldblackJack/DetailedCalculation.scala), changed = Set(${BASE}/src/main/scala/blackjack/package.scala), unmodified = ...),Set(),Set(),API Changes: Set())
[debug] 
[debug] Initial source changes:
[debug] 	removed: Set(${BASE}/src/main/scala/newBJ/action/DoubleDownAction.scala, ${BASE}/src/main/scala/BJ.scala, ${BASE}/src/main/scala/oldblackJack/BasicStrategy.scala, ${BASE}/src/main/scala/newBJ/action/HitAction.scala, ${BASE}/src/main/scala/oldblackJack/package.scala, ${BASE}/src/main/scala/oldblackJack/DetailedStrategy.scala, ${BASE}/src/main/scala/oldblackJack/BlackJackIO.scala, ${BASE}/src/main/scala/oldblackJack/DetailedCalculation.scala, ${BASE}/src/main/scala/oldblackJack/BlackJackUtility.scala, ${BASE}/src/main/scala/newBJ/action/StandAction.scala)
[debug] 	added: Set()
[debug] 	modified: Set(${BASE}/src/main/scala/blackjack/package.scala)
[debug] Invalidated products: Set()
[debug] External API changes: API Changes: Set()
[debug] Modified binary dependencies: Set()
[debug] Initial directly invalidated classes: Set(oldblackJack.DetailedStrategy.StatisticalResults, blackjack.DoubleDown, oldblackJack.BlackJackIO.Dealer, BJ.HitResult, oldblackJack.BasicStrategy, oldblackJack.Simplified, blackjack.SystemCommand, blackjack.InitDeck, oldblackJack.DoubleDown, oldblackJack.DetailedCalculation, blackjack.Stand, BJ.ActionFlowResult, blackjack.Action, blackjack.Continue, oldblackJack.BlackJackIO.Player, blackjack.Hit, oldblackJack.DetailedStrategy.OriginalData, BJ.MainFlowResult, oldblackJack.GameCommand, oldblackJack.StartGame, oldblackJack.Refined, oldblackJack.BlackJackIO, oldblackJack.Stand, oldblackJack.CalculationType, oldblackJack.Action, oldblackJack.Hit, oldblackJack.Finish, BJ.DoubleDownResult, oldblackJack.DetailedCalculation.Rations, oldblackJack.package, blackjack.package, oldblackJack.BlackJackIO.UserHit, oldblackJack.BlackJackUtility, BJ.FirstFlowResult, oldblackJack.Continue, BJ, oldblackJack.DetailedStrategy.CalculationProbabilityDetails, oldblackJack.DetailedStrategy, oldblackJack.InitDeck, blackjack.Finish, BJ.StandResult, oldblackJack.BlackJackIO.User)
[debug] Sources indirectly invalidated by:
[debug] 	product: Set()
[debug] 	binary dep: Set()
[debug] 	external source: Set()
[debug] All initially invalidated classes: Set(oldblackJack.DetailedStrategy.StatisticalResults, blackjack.DoubleDown, oldblackJack.BlackJackIO.Dealer, BJ.HitResult, oldblackJack.BasicStrategy, oldblackJack.Simplified, blackjack.SystemCommand, blackjack.InitDeck, oldblackJack.DoubleDown, oldblackJack.DetailedCalculation, blackjack.Stand, BJ.ActionFlowResult, blackjack.Action, blackjack.Continue, oldblackJack.BlackJackIO.Player, blackjack.Hit, oldblackJack.DetailedStrategy.OriginalData, BJ.MainFlowResult, oldblackJack.GameCommand, oldblackJack.StartGame, oldblackJack.Refined, oldblackJack.BlackJackIO, oldblackJack.Stand, oldblackJack.CalculationType, oldblackJack.Action, oldblackJack.Hit, oldblackJack.Finish, BJ.DoubleDownResult, oldblackJack.DetailedCalculation.Rations, oldblackJack.package, blackjack.package, oldblackJack.BlackJackIO.UserHit, oldblackJack.BlackJackUtility, BJ.FirstFlowResult, oldblackJack.Continue, BJ, oldblackJack.DetailedStrategy.CalculationProbabilityDetails, oldblackJack.DetailedStrategy, oldblackJack.InitDeck, blackjack.Finish, BJ.StandResult, oldblackJack.BlackJackIO.User)
[debug] All initially invalidated sources:Set(${BASE}/src/main/scala/blackjack/package.scala)
[debug] Initial set of included nodes: oldblackJack.DetailedStrategy.StatisticalResults, blackjack.DoubleDown, oldblackJack.BlackJackIO.Dealer, BJ.HitResult, oldblackJack.BasicStrategy, oldblackJack.Simplified, blackjack.SystemCommand, blackjack.InitDeck, oldblackJack.DoubleDown, oldblackJack.DetailedCalculation, blackjack.Stand, BJ.ActionFlowResult, blackjack.Action, blackjack.Continue, oldblackJack.BlackJackIO.Player, blackjack.Hit, oldblackJack.DetailedStrategy.OriginalData, BJ.MainFlowResult, oldblackJack.GameCommand, oldblackJack.StartGame, oldblackJack.Refined, oldblackJack.BlackJackIO, oldblackJack.Stand, oldblackJack.CalculationType, oldblackJack.Action, oldblackJack.Hit, oldblackJack.Finish, BJ.DoubleDownResult, oldblackJack.DetailedCalculation.Rations, oldblackJack.package, blackjack.package, oldblackJack.BlackJackIO.UserHit, oldblackJack.BlackJackUtility, BJ.FirstFlowResult, oldblackJack.Continue, BJ, oldblackJack.DetailedStrategy.CalculationProbabilityDetails, oldblackJack.DetailedStrategy, oldblackJack.InitDeck, blackjack.Finish, BJ.StandResult, oldblackJack.BlackJackIO.User
[debug] Including blackjack.InitDeck by blackjack.SystemCommand
[debug] Including blackjack.Continue by blackjack.SystemCommand
[debug] Including blackjack.Finish by blackjack.SystemCommand
[debug] Including blackjack.Hit by blackjack.Action
[debug] Including oldblackJack.BlackJackIO.UserHit by oldblackJack.BlackJackIO.Player
[debug] Including oldblackJack.BlackJackIO.User by oldblackJack.BlackJackIO.Player
[debug] Including oldblackJack.StartGame by oldblackJack.GameCommand
[debug] Including oldblackJack.Finish by oldblackJack.GameCommand
[debug] Including oldblackJack.Continue by oldblackJack.GameCommand
[debug] Including oldblackJack.InitDeck by oldblackJack.GameCommand
[debug] Including oldblackJack.Hit by oldblackJack.Action
[debug] compilation cycle 1
[info] compiling 1 Scala source to C:\Users\soroc\Documents\Scala-workspace\BlackJack\target\scala-2.13\classes ...
[debug] Getting org.scala-sbt:compiler-bridge_2.13:1.4.3:compile for Scala 2.13.6
[debug] [zinc] Running cached compiler 1e956c4a for Scala compiler version 2.13.6
[debug] [zinc] The Scala compiler is invoked with:
[debug] 	-bootclasspath
[debug] 	C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.6\scala-library-2.13.6.jar
[debug] 	-classpath
[debug] 	C:\Users\soroc\Documents\Scala-workspace\BlackJack\target\scala-2.13\classes;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-actor-typed_2.13\2.6.8\akka-actor-typed_2.13-2.6.8.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-slf4j_2.13\2.6.8\akka-slf4j_2.13-2.6.8.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-core_2.13\2.6.1\cats-core_2.13-2.6.1.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-effect_2.13\3.2.2\cats-effect_2.13-3.2.2.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-actor_2.13\2.6.8\akka-actor_2.13-2.6.8.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-kernel_2.13\2.6.1\cats-kernel_2.13-2.6.1.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\simulacrum-scalafix-annotations_2.13\0.5.4\simulacrum-scalafix-annotations_2.13-0.5.4.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-effect-kernel_2.13\3.2.2\cats-effect-kernel_2.13-3.2.2.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\typelevel\cats-effect-std_2.13\3.2.2\cats-effect-std_2.13-3.2.2.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\config\1.4.0\config-1.4.0.jar;C:\Users\soroc\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-java8-compat_2.13\0.9.0\scala-java8-compat_2.13-0.9.0.jar
[debug] Invalidating (transitively) by inheritance from oldblackJack.Action...
[debug] Initial set of included nodes: oldblackJack.Action
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Action)
[debug] Change NamesChange(oldblackJack.Action,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(oldblackJack;Action;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Action,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.Action has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(oldblackJack;Action;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Action,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Action)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.Stand...
[debug] Initial set of included nodes: oldblackJack.Stand
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Stand)
[debug] Change NamesChange(oldblackJack.Stand,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(Stand,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.Stand has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(Stand,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Stand)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DetailedStrategy.CalculationProbabilityDetails...
[debug] Initial set of included nodes: oldblackJack.DetailedStrategy.CalculationProbabilityDetails
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DetailedStrategy.CalculationProbabilityDetails)
[debug] Change NamesChange(oldblackJack.DetailedStrategy.CalculationProbabilityDetails,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(copy$default$4,[Default]), UsedName(asInstanceOf,[Default]), UsedName(copy$default$6,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(dealerBurstProbability,[Default]), UsedName(dealerLoseProbability,[Default]), UsedName(CalculationProbabilityDetails,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(copy$default$5,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(accuracy,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(drawProbability,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(playerBurstProbability,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(oldblackJack;DetailedStrategy;CalculationProbabilityDetails;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(dealerWinProbability,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The oldblackJack.DetailedStrategy.CalculationProbabilityDetails has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(copy$default$4,[Default]), UsedName(asInstanceOf,[Default]), UsedName(copy$default$6,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(dealerBurstProbability,[Default]), UsedName(dealerLoseProbability,[Default]), UsedName(CalculationProbabilityDetails,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(copy$default$5,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(accuracy,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(drawProbability,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(playerBurstProbability,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(oldblackJack;DetailedStrategy;CalculationProbabilityDetails;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(dealerWinProbability,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DetailedStrategy.CalculationProbabilityDetails)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.Finish...
[debug] Initial set of included nodes: oldblackJack.Finish
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Finish)
[debug] Change NamesChange(oldblackJack.Finish,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(Finish,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.Finish has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(Finish,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Finish)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ...
[debug] Initial set of included nodes: BJ
[debug] Invalidated by transitive inheritance dependency: Set(BJ)
[debug] Change NamesChange(BJ,ModifiedNames(changes = UsedName(delayedInit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(args,[Default]), UsedName(ne,[Default]), UsedName(FirstFlowResult,[Default]), UsedName(DoubleDownResult,[Default]), UsedName(mainFlow,[Default]), UsedName(main,[Default]), UsedName(HitResult,[Default]), UsedName(commandSwitch,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(MainFlowResult,[Default]), UsedName(##,[Default]), UsedName(BJ,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(actionFlow,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(executionStart,[Default]), UsedName(finalize,[Default]), UsedName(firstFlow,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(ActionFlowResult,[Default]), UsedName(notifyAll,[Default]), UsedName(StandResult,[Default]))) invalidates 1 classes due to The BJ has the following regular definitions changed:
[debug] 	UsedName(delayedInit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(args,[Default]), UsedName(ne,[Default]), UsedName(FirstFlowResult,[Default]), UsedName(DoubleDownResult,[Default]), UsedName(mainFlow,[Default]), UsedName(main,[Default]), UsedName(HitResult,[Default]), UsedName(commandSwitch,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(MainFlowResult,[Default]), UsedName(##,[Default]), UsedName(BJ,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(actionFlow,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(executionStart,[Default]), UsedName(finalize,[Default]), UsedName(firstFlow,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(ActionFlowResult,[Default]), UsedName(notifyAll,[Default]), UsedName(StandResult,[Default]).
[debug]   > by transitive inheritance: Set(BJ)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.package...
[debug] Initial set of included nodes: oldblackJack.package
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.package)
[debug] Change NamesChange(oldblackJack.package,ModifiedNames(changes = UsedName(TRAMPS,[Default]), UsedName(changeAceToEleven,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(Simplified,[Default]), UsedName(Stand,[Default]), UsedName(Deck,[Default]), UsedName(DoubleDown,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Refined,[Default]), UsedName(Action,[Default]), UsedName(InitDeck,[Default]), UsedName(initDeck,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(Continue,[Default]), UsedName(StartGame,[Default]), UsedName(package,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(deleteHandsAtDeck,[Default]), UsedName(finalize,[Default]), UsedName(Tramps,[Default]), UsedName(Tramp,[Default]), UsedName(Finish,[Default]), UsedName(Hands,[Default]), UsedName(Hit,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(CalculationType,[Default]), UsedName(notifyAll,[Default]), UsedName(GameCommand,[Default]))) invalidates 1 classes due to The oldblackJack.package has the following regular definitions changed:
[debug] 	UsedName(TRAMPS,[Default]), UsedName(changeAceToEleven,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(Simplified,[Default]), UsedName(Stand,[Default]), UsedName(Deck,[Default]), UsedName(DoubleDown,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Refined,[Default]), UsedName(Action,[Default]), UsedName(InitDeck,[Default]), UsedName(initDeck,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(Continue,[Default]), UsedName(StartGame,[Default]), UsedName(package,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(deleteHandsAtDeck,[Default]), UsedName(finalize,[Default]), UsedName(Tramps,[Default]), UsedName(Tramp,[Default]), UsedName(Finish,[Default]), UsedName(Hands,[Default]), UsedName(Hit,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(CalculationType,[Default]), UsedName(notifyAll,[Default]), UsedName(GameCommand,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.package)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ.MainFlowResult...
[debug] Initial set of included nodes: BJ.MainFlowResult
[debug] Invalidated by transitive inheritance dependency: Set(BJ.MainFlowResult)
[debug] Change NamesChange(BJ.MainFlowResult,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(MainFlowResult,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(BJ;MainFlowResult;init;,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The BJ.MainFlowResult has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(MainFlowResult,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(BJ;MainFlowResult;init;,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(BJ.MainFlowResult)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DetailedStrategy...
[debug] Initial set of included nodes: oldblackJack.DetailedStrategy
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DetailedStrategy)
[debug] Change NamesChange(oldblackJack.DetailedStrategy,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(createPlayerScore,[Default]), UsedName(CalculationProbabilityDetails,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(StatisticalResults,[Default]), UsedName(clone,[Default]), UsedName(getRefinedAction,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(burstProbability,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(createStatisticalResults,[Default]), UsedName(finalize,[Default]), UsedName(OriginalData,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(DetailedStrategy,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.DetailedStrategy has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(createPlayerScore,[Default]), UsedName(CalculationProbabilityDetails,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(StatisticalResults,[Default]), UsedName(clone,[Default]), UsedName(getRefinedAction,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(burstProbability,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(createStatisticalResults,[Default]), UsedName(finalize,[Default]), UsedName(OriginalData,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(DetailedStrategy,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DetailedStrategy)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.Simplified...
[debug] Initial set of included nodes: oldblackJack.Simplified
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Simplified)
[debug] Change NamesChange(oldblackJack.Simplified,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(Simplified,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.Simplified has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(Simplified,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Simplified)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DetailedCalculation...
[debug] Initial set of included nodes: oldblackJack.DetailedCalculation
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DetailedCalculation)
[debug] Change NamesChange(oldblackJack.DetailedCalculation,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(hitRatioByLengthCalculation,[Default]), UsedName(ne,[Default]), UsedName(loopHit,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Rations,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(asynchronousCalculationSeparated,[Default]), UsedName(futureLoopHit,[Default]), UsedName(DetailedCalculation,[Default]), UsedName(finalize,[Default]), UsedName(denominatorCalculation,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.DetailedCalculation has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(hitRatioByLengthCalculation,[Default]), UsedName(ne,[Default]), UsedName(loopHit,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Rations,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(asynchronousCalculationSeparated,[Default]), UsedName(futureLoopHit,[Default]), UsedName(DetailedCalculation,[Default]), UsedName(finalize,[Default]), UsedName(denominatorCalculation,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DetailedCalculation)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BlackJackIO.Dealer...
[debug] Initial set of included nodes: oldblackJack.BlackJackIO.Dealer
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BlackJackIO.Dealer)
[debug] Change NamesChange(oldblackJack.BlackJackIO.Dealer,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(Dealer,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.BlackJackIO.Dealer has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(Dealer,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BlackJackIO.Dealer)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from blackjack.package...
[debug] Initial set of included nodes: blackjack.package
[debug] Invalidated by transitive inheritance dependency: Set(blackjack.package)
[debug] None of the modified names appears in source file of blackjack.system.flow.action.DoubleDownFlow. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.flow.action.HitFlow. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.parts.BlackJackIO. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.flow.action.StandFlow. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.PossibilityHandCalculator. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.flow.calculation.CalculationFlowAbstract. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.BlackJackStatistical. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.Hand. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.probability.strategy.BasicStrategy. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.flow.calculation.CalculationFlow. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.probability.strategy.DetailsStrategy. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of Main. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.parts.Computable. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.probability.BlackJackProbs. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.system.flow.action.ActionFlow. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.BlackJackStatisticalCreater. This dependency is not being considered for invalidation.
[debug] None of the modified names appears in source file of blackjack.calculation.statistical.probability.strategy.Strategy. This dependency is not being considered for invalidation.
[debug] Change NamesChange(blackjack.package,ModifiedNames(changes = UsedName(finalize,[Default]))) invalidates 1 classes due to The blackjack.package has the following regular definitions changed:
[debug] 	UsedName(finalize,[Default]).
[debug]   > by transitive inheritance: Set(blackjack.package)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.Hit...
[debug] Initial set of included nodes: oldblackJack.Hit
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Hit)
[debug] Change NamesChange(oldblackJack.Hit,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(Hit,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.Hit has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(Hit,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Hit)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.GameCommand...
[debug] Initial set of included nodes: oldblackJack.GameCommand
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.GameCommand)
[debug] Change NamesChange(oldblackJack.GameCommand,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(oldblackJack;GameCommand;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(GameCommand,[Default]))) invalidates 1 classes due to The oldblackJack.GameCommand has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(oldblackJack;GameCommand;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(GameCommand,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.GameCommand)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DetailedStrategy.StatisticalResults...
[debug] Initial set of included nodes: oldblackJack.DetailedStrategy.StatisticalResults
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DetailedStrategy.StatisticalResults)
[debug] Change NamesChange(oldblackJack.DetailedStrategy.StatisticalResults,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(probabilityMap,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(StatisticalResults,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(calculationCounter,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(oldblackJack;DetailedStrategy;StatisticalResults;init;,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The oldblackJack.DetailedStrategy.StatisticalResults has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(probabilityMap,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(StatisticalResults,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(calculationCounter,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(oldblackJack;DetailedStrategy;StatisticalResults;init;,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DetailedStrategy.StatisticalResults)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ.DoubleDownResult...
[debug] Initial set of included nodes: BJ.DoubleDownResult
[debug] Invalidated by transitive inheritance dependency: Set(BJ.DoubleDownResult)
[debug] Change NamesChange(BJ.DoubleDownResult,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(DoubleDownResult,[Default]), UsedName(BJ;DoubleDownResult;init;,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The BJ.DoubleDownResult has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(DoubleDownResult,[Default]), UsedName(BJ;DoubleDownResult;init;,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(BJ.DoubleDownResult)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BasicStrategy...
[debug] Initial set of included nodes: oldblackJack.BasicStrategy
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BasicStrategy)
[debug] Change NamesChange(oldblackJack.BasicStrategy,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(getSimplifiedAction,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(BasicStrategy,[Default]))) invalidates 1 classes due to The oldblackJack.BasicStrategy has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(getSimplifiedAction,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(BasicStrategy,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BasicStrategy)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.StartGame...
[debug] Initial set of included nodes: oldblackJack.StartGame
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.StartGame)
[debug] Change NamesChange(oldblackJack.StartGame,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(StartGame,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.StartGame has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(StartGame,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.StartGame)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BlackJackIO...
[debug] Initial set of included nodes: oldblackJack.BlackJackIO
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BlackJackIO)
[debug] Change NamesChange(oldblackJack.BlackJackIO,ModifiedNames(changes = UsedName(UserHit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(BlackJackIO,[Default]), UsedName(==,[Default]), UsedName(readDeckNum,[Default]), UsedName(hashCode,[Default]), UsedName(Player,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Dealer,[Default]), UsedName(readGameCommand,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(readDealerHands,[Default]), UsedName(readAction,[Default]), UsedName(finalize,[Default]), UsedName(User,[Default]), UsedName(equals,[Default]), UsedName(readHand,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.BlackJackIO has the following regular definitions changed:
[debug] 	UsedName(UserHit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(BlackJackIO,[Default]), UsedName(==,[Default]), UsedName(readDeckNum,[Default]), UsedName(hashCode,[Default]), UsedName(Player,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Dealer,[Default]), UsedName(readGameCommand,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(readDealerHands,[Default]), UsedName(readAction,[Default]), UsedName(finalize,[Default]), UsedName(User,[Default]), UsedName(equals,[Default]), UsedName(readHand,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BlackJackIO)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ.ActionFlowResult...
[debug] Initial set of included nodes: BJ.ActionFlowResult
[debug] Invalidated by transitive inheritance dependency: Set(BJ.ActionFlowResult)
[debug] Change NamesChange(BJ.ActionFlowResult,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(BJ;ActionFlowResult;init;,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(ActionFlowResult,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The BJ.ActionFlowResult has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(BJ;ActionFlowResult;init;,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(ActionFlowResult,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(BJ.ActionFlowResult)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.CalculationType...
[debug] Initial set of included nodes: oldblackJack.CalculationType
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.CalculationType)
[debug] Change NamesChange(oldblackJack.CalculationType,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(oldblackJack;CalculationType;init;,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(CalculationType,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.CalculationType has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(oldblackJack;CalculationType;init;,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(CalculationType,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.CalculationType)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DetailedStrategy.OriginalData...
[debug] Initial set of included nodes: oldblackJack.DetailedStrategy.OriginalData
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DetailedStrategy.OriginalData)
[debug] Change NamesChange(oldblackJack.DetailedStrategy.OriginalData,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(dealerHands,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(playerHands,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(oldblackJack;DetailedStrategy;OriginalData;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(OriginalData,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The oldblackJack.DetailedStrategy.OriginalData has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(dealerHands,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(playerHands,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(oldblackJack;DetailedStrategy;OriginalData;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(OriginalData,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DetailedStrategy.OriginalData)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.Refined...
[debug] Initial set of included nodes: oldblackJack.Refined
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Refined)
[debug] Change NamesChange(oldblackJack.Refined,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Refined,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.Refined has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Refined,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Refined)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BlackJackUtility...
[debug] Initial set of included nodes: oldblackJack.BlackJackUtility
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BlackJackUtility)
[debug] Change NamesChange(oldblackJack.BlackJackUtility,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(BlackJackUtility,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(calculateHandsToAction,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.BlackJackUtility has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(BlackJackUtility,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(calculateHandsToAction,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BlackJackUtility)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ.HitResult...
[debug] Initial set of included nodes: BJ.HitResult
[debug] Invalidated by transitive inheritance dependency: Set(BJ.HitResult)
[debug] Change NamesChange(BJ.HitResult,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(HitResult,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(optHands,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(action,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(BJ;HitResult;init;,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The BJ.HitResult has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(HitResult,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(optHands,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(action,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(BJ;HitResult;init;,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(BJ.HitResult)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ.StandResult...
[debug] Initial set of included nodes: BJ.StandResult
[debug] Invalidated by transitive inheritance dependency: Set(BJ.StandResult)
[debug] Change NamesChange(BJ.StandResult,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(BJ;StandResult;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(StandResult,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The BJ.StandResult has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(BJ;StandResult;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(gameCommand,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(StandResult,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(BJ.StandResult)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BlackJackIO.User...
[debug] Initial set of included nodes: oldblackJack.BlackJackIO.User
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BlackJackIO.User)
[debug] Change NamesChange(oldblackJack.BlackJackIO.User,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(User,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.BlackJackIO.User has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(User,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BlackJackIO.User)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DetailedCalculation.Rations...
[debug] Initial set of included nodes: oldblackJack.DetailedCalculation.Rations
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DetailedCalculation.Rations)
[debug] Change NamesChange(oldblackJack.DetailedCalculation.Rations,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(calculatedCount,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(Rations,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(probability,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(score,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(oldblackJack;DetailedCalculation;Rations;init;,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The oldblackJack.DetailedCalculation.Rations has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(calculatedCount,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(Rations,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(probability,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(score,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(oldblackJack;DetailedCalculation;Rations;init;,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DetailedCalculation.Rations)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BlackJackIO.Player...
[debug] Initial set of included nodes: oldblackJack.BlackJackIO.Player
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BlackJackIO.Player)
[debug] Change NamesChange(oldblackJack.BlackJackIO.Player,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(oldblackJack;BlackJackIO;Player;init;,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(Player,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The oldblackJack.BlackJackIO.Player has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(oldblackJack;BlackJackIO;Player;init;,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(Player,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BlackJackIO.Player)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.DoubleDown...
[debug] Initial set of included nodes: oldblackJack.DoubleDown
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.DoubleDown)
[debug] Change NamesChange(oldblackJack.DoubleDown,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(DoubleDown,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.DoubleDown has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(DoubleDown,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.DoubleDown)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.BlackJackIO.UserHit...
[debug] Initial set of included nodes: oldblackJack.BlackJackIO.UserHit
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.BlackJackIO.UserHit)
[debug] Change NamesChange(oldblackJack.BlackJackIO.UserHit,ModifiedNames(changes = UsedName(UserHit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.BlackJackIO.UserHit has the following regular definitions changed:
[debug] 	UsedName(UserHit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.BlackJackIO.UserHit)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.Continue...
[debug] Initial set of included nodes: oldblackJack.Continue
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.Continue)
[debug] Change NamesChange(oldblackJack.Continue,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(Continue,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.Continue has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(Continue,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.Continue)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from oldblackJack.InitDeck...
[debug] Initial set of included nodes: oldblackJack.InitDeck
[debug] Invalidated by transitive inheritance dependency: Set(oldblackJack.InitDeck)
[debug] Change NamesChange(oldblackJack.InitDeck,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(InitDeck,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The oldblackJack.InitDeck has the following regular definitions changed:
[debug] 	UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(InitDeck,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(finalize,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]).
[debug]   > by transitive inheritance: Set(oldblackJack.InitDeck)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from BJ.FirstFlowResult...
[debug] Initial set of included nodes: BJ.FirstFlowResult
[debug] Invalidated by transitive inheritance dependency: Set(BJ.FirstFlowResult)
[debug] Change NamesChange(BJ.FirstFlowResult,ModifiedNames(changes = UsedName(tupled,[Default]), UsedName(copy$default$4,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dealerHand,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(FirstFlowResult,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(playerHands,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(action,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(BJ;FirstFlowResult;init;,[Default]), UsedName(unapply,[Default]))) invalidates 1 classes due to The BJ.FirstFlowResult has the following regular definitions changed:
[debug] 	UsedName(tupled,[Default]), UsedName(copy$default$4,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dealerHand,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(FirstFlowResult,[Default]), UsedName(productElementNames,[Default]), UsedName(eq,[Default]), UsedName(productPrefix,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(productElementName,[Default]), UsedName(synchronized,[Default]), UsedName(playerHands,[Default]), UsedName(deck,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(clone,[Default]), UsedName(toString,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(productIterator,[Default]), UsedName(action,[Default]), UsedName(finalize,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$3,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName(curried,[Default]), UsedName(BJ;FirstFlowResult;init;,[Default]), UsedName(unapply,[Default]).
[debug]   > by transitive inheritance: Set(BJ.FirstFlowResult)
[debug]   > 
[debug]   > 
[debug]         
[debug] New invalidations:
[debug] Initial set of included nodes: 
[debug] Previously invalidated, but (transitively) depend on new invalidations:
[debug] Final step, transitive dependencies:
[debug] 	Set()
[debug] No classes were invalidated.
[debug] Scala compilation took 0.2520772 s
[info] done compiling
